#!/bin/bash
#
#  gnutls.SlackBuild is free software; you can redistribute
#  it and/or modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2 of the License,
#  or any later version.
#
#  gnutls.SlackBuild is distributed in the hope that it will
#  be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
#  Public License for more details.
#
#  You should have received a copy of the GNU General Public License along with
#  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
#  Place - Suite 330, Boston, MA 02111-1307, USA
#
# slackbuild for gnutls, by Silvio Rhatto
# requires:  
# tested: gnutls-2.0.4
#

# Look for slackbuildrc
if [ -f ~/.slackbuildrc ]; then
  source ~/.slackbuildrc
elif [ -f /etc/slackbuildrc ]; then
  source /etc/slackbuildrc
fi

# Set variables
CWD="$(pwd)"
SRC_NAME="gnutls"
PKG_NAME="gnutls"
ARCH=${ARCH:=i486}
SRC_VERSION=${VERSION:=2.0.4}
PKG_VERSION="$(echo "$SRC_VERSION" | tr '[[:blank:]-]' '_')"
BUILD=${BUILD:=1rha}
SRC_DIR=${SRC_DIR:=$CWD}/$PKG_NAME
TMP=${TMP:=/tmp}
PKG=${PKG:=$TMP/package-$PKG_NAME}
REPOS=${REPOS:=$TMP}
PREFIX=${PREFIX:=/usr}
PKG_WORK="$TMP/$SRC_NAME"
CONF_OPTIONS=${CONF_OPTIONS:="--disable-static"}
NUMJOBS=${NUMJOBS:=""}

# Set system libraries' path and optmization flags based on $ARCH
LIBDIR="$PREFIX/lib"

if [ "$ARCH" = "i386" ]; then
  SLKCFLAGS="-O2 -march=i386 -mcpu=i686"
elif [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mcpu=i686"
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686"
elif [ "$ARCH" = "s390" ]; then
  SLKCFLAGS="-O2"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIR="$PREFIX/lib64"
  LDFLAGS="-L/lib64 -L/usr/lib64"
fi

# Set error codes (used by createpkg)
ERROR_WGET=31;      ERROR_MAKE=32;      ERROR_INSTALL=33
ERROR_MD5=34;       ERROR_CONF=35;      ERROR_HELP=36
ERROR_TAR=37;       ERROR_MKPKG=38;     ERROR_GPG=39
ERROR_PATCH=40;     ERROR_VCS=41;       ERROR_MKDIR=42

# Clean up any leftovers of previous builds
rm -rf "$PKG_WORK" 2> /dev/null
rm -rf "$PKG" 2> /dev/null

# Create directories if necessary
mkdir -p "$SRC_DIR" || exit $ERROR_MKDIR
mkdir -p "$PKG" || exit $ERROR_MKDIR
mkdir -p "$REPOS" || exit $ERROR_MKDIR
mkdir -p "$PKG_WORK" || exit $ERROR_MKDIR

# Dowload source if necessary
SRC="$SRC_NAME-$VERSION.tar.bz2"
URL="ftp://ftp.gnupg.org/gcrypt/alpha/gnutls/$SRC"

if [ ! -s "$SRC_DIR/$SRC" ] || ! bunzip2 -t "$SRC_DIR/$SRC" 2> /dev/null; then
  wget "$URL" -O "$SRC_DIR/$SRC" || exit $ERROR_WGET
fi

# Import minimized signing key from
if echo http://josefsson.org/key.txt | grep -q -v "SIGNING KEY URL"; then
  lynx -dump http://josefsson.org/key.txt | gpg --import || exit $ERROR_GPG
elif echo [[SIGNING KEY ID]] | grep -q -v "SIGNING KEY ID"; then
  gpg --recv-keys [[SIGNING KEY ID]] || exit $ERROR_GPG
else
  gpg --import << EOKEY || exit $ERROR_GPG
[[SIGNING KEY]]
EOKEY
fi

# Download source's signature if necessary and check it
if echo [[SIGNING URL]] | grep -q -v "SIGNING URL"; then
  SIGNATURE="`basename [[SIGNING URL]]`"
  if [ ! -s "$SRC_DIR/$SIGNATURE" ]; then
    wget "[[SIGNING URL]]" -O "$SRC_DIR/$SIGNATURE" || exit $ERROR_WGET
  fi
else
  if [ -s "$SRC_DIR/$SRC.sig" ]; then
    SIGNATURE="$SRC.sig"
  elif [ -s "$SRC_DIR/$SRC.asc" ]; then
    SIGNATURE="$SRC.asc"
  else
    echo Trying to get signature file from $URL.sig...
    if wget "$URL.sig" -O "$SRC_DIR/$SRC.sig"; then
      SIGNATURE="$SRC.sig"
    else
      rm $SRC_DIR/$SRC.sig
      echo Trying to get signature file from $URL.asc...
      if wget "$URL.asc" -O "$SRC_DIR/$SRC.asc"; then
        SIGNATURE="$SRC.asc"
      else
        rm $SRC_DIR/$SRC.asc
        echo "Error getting source's signature file"
        exit $ERROR_GPG
      fi
    fi
  fi
fi

echo Checking $SRC_DIR/$SRC with gpg using $SRC_DIR/$SIGNATURE...
gpg --verify "$SRC_DIR/$SIGNATURE" "$SRC_DIR/$SRC" || exit $ERROR_GPG
echo Success.

# Untar
cd "$PKG_WORK"
tar --no-same-owner --no-same-permissions -xvf "$SRC_DIR/$SRC" || exit $ERROR_TAR
PKG_SRC="$PWD/`ls -l | awk '/^d/ { print $8 }'`"
cd "$PKG_SRC"

# Configure
CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  ./configure \
  --prefix="$PREFIX" --libdir="$LIBDIR" $CONF_OPTIONS || exit $ERROR_CONF

# Compile
make $NUMJOBS || exit $ERROR_MAKE

# Install
make install DESTDIR="$PKG" || exit $ERROR_INSTALL

# Strip binaries
( cd "$PKG"
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | \
    xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | \
    xargs strip --strip-unneeded 2> /dev/null
)

# Install documentation
DOCS="AUTHORS COPYING* ChangeLog INSTALL NEWS README THANKS"
mkdir -p "$PKG/usr/doc/$PKG_NAME-$PKG_VERSION" || exit $ERROR_MKDIR
for doc in $DOCS; do
  if [ -f "$doc" ]; then
    cp -a $doc "$PKG/usr/doc/$PKG_NAME-$PKG_VERSION"
  fi
done

# Add package description (slack-desc)
mkdir -p "$PKG/install" || exit $ERROR_MKDIR
cat << EODESC > "$PKG/install/slack-desc"
# HOW TO EDIT THIS FILE:
# The "handy ruler" below makes it easier to edit a package description.  Line
# up the first '|' above the ':' following the base package name, and the '|'
# on the right side marks the last column you can put a character in.  You must
# make exactly 11 lines for the formatting to be correct.  It's also
# customary to leave one space after the ':'.

      |-----handy-ruler-------------------------------------------------------|
gnutls: Gnutls (Transport Layer Security)
gnutls: 
gnutls: This is the GNU TLS library. More up to date information can be found
gnutls: at http://www.gnu.org/software/gnutls/ and http://www.gnutls.org/
gnutls: 
gnutls: 
gnutls: 
gnutls: 
gnutls: 
gnutls: 
gnutls:
EODESC

# Build the package
cd "$PKG"
makepkg -l y -c n "$REPOS/$PKG_NAME-$PKG_VERSION-$ARCH-$BUILD.tgz" || exit $ERROR_MKPKG

# Delete source and build directories if requested
if [ "$CLEANUP" == "yes" ]; then
  rm -rf "$PKG_WORK" "$PKG"
fi
