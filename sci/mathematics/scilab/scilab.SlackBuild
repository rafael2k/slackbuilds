#!/bin/bash
#
#  scilab.SlackBuild is free software; you can redistribute
#  it and/or modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2 of the License,
#  or any later version.
#
#  scilab.SlackBuild is distributed in the hope that it will
#  be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
#  Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
#
# slackbuild for scilab, by Rudson R. Alves
# requires:  
# tested: scilab-4.1.2
#

# Look for slackbuildrc
if [ -f ~/.slackbuildrc ]; then
  source ~/.slackbuildrc
elif [ -f /etc/slackbuildrc ]; then
  source /etc/slackbuildrc
fi

# Set variables
CWD="$(pwd)"
SRC_NAME="scilab"
PKG_NAME="scilab"
ARCH=${ARCH:=i486}
SRC_VERSION=${VERSION:=4.1.2}
PKG_VERSION="$(echo "$SRC_VERSION" | tr '[[:blank:]-]' '_')"
BUILD=${BUILD:=1rra}
SRC_DIR=${SRC_DIR:=$CWD}/$PKG_NAME
TMP=${TMP:=/tmp}
PKG=${PKG:=$TMP/package-$PKG_NAME}
REPOS=${REPOS:=$TMP}
PREFIX=${PREFIX:=/usr}
PKG_WORK="$TMP/$SRC_NAME"
CONF_OPTIONS=${CONF_OPTIONS:="--with-gfortran --prefix=/usr --with-tcl-library=/usr/lib64"}
NUMJOBS=${NUMJOBS:="-j4"}

# Set system libraries' path and optmization flags based on $ARCH
LIBDIR="$PREFIX/lib"

if [ "$ARCH" = "i386" ]; then
  SLKCFLAGS="-O2 -march=i386 -mtune=i686"
elif [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686"
elif [ "$ARCH" = "s390" ]; then
  SLKCFLAGS="-O2"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIR="$PREFIX/lib64"
  LDFLAGS="-L/lib64 -L/usr/lib64"
fi

# Set error codes (used by createpkg)
ERROR_WGET=31;      ERROR_MAKE=32;      ERROR_INSTALL=33
ERROR_MD5=34;       ERROR_CONF=35;      ERROR_HELP=36
ERROR_TAR=37;       ERROR_MKPKG=38;     ERROR_GPG=39
ERROR_PATCH=40;     ERROR_VCS=41;       ERROR_MKDIR=42
ERROR_MANIFEST=43;

# Clean up any leftovers of previous builds
rm -rf "$PKG_WORK" 2> /dev/null
rm -rf "$PKG" 2> /dev/null

# Create directories if necessary
mkdir -p "$SRC_DIR" || exit $ERROR_MKDIR
mkdir -p "$PKG" || exit $ERROR_MKDIR
mkdir -p "$REPOS" || exit $ERROR_MKDIR
mkdir -p "$PKG_WORK" || exit $ERROR_MKDIR

# Dowload source if necessary
SRC="$SRC_NAME-$VERSION-src.tar.gz"
URL="http://www.scilab.org/download/$VERSION/$SRC"

if [ ! -s "$SRC_DIR/$SRC" ] || ! gunzip -t "$SRC_DIR/$SRC" 2> /dev/null; then
  wget "$URL" -O "$SRC_DIR/$SRC" || exit $ERROR_WGET
fi

# Check Manifest file
if [ -e "$CWD/Manifest" ]; then

  # Manifest signature checking
  if grep -q -- "-----BEGIN PGP SIGNED MESSAGE-----" $CWD/Manifest; then
    echo "Checking Manifest signature..."
    gpg --verify $CWD/Manifest
    if [ "$?" != "0" ]; then
      exit $ERROR_MANIFEST
    fi
  fi

  MANIFEST_LINES="`grep -E -v "^(MKBUILD|SLACKBUILD)" $CWD/Manifest | wc -l`"

  for ((MANIFEST_COUNT=1; MANIFEST_COUNT <= $MANIFEST_LINES; MANIFEST_COUNT++)); do

    MANIFEST_LINE="`grep -E -v "^(MKBUILD|SLACKBUILD)" $CWD/Manifest | head -n $MANIFEST_COUNT | tail -n 1`"
    MANIFEST_FILE="`echo $MANIFEST_LINE | awk '{ print $2 }'`"
    MANIFEST_FILE_TYPE="`echo $MANIFEST_LINE | awk '{ print $1 }'`"

    if [ -e "$SRC_DIR/$MANIFEST_FILE" ]; then
      MANIFEST_FILE="$SRC_DIR/$MANIFEST_FILE"
    else
      MANIFEST_FILE="`find $CWD -name $MANIFEST_FILE`"
    fi

    if [ ! -e "$MANIFEST_FILE" ] || [ -d "$MANIFEST_FILE" ]; then
      continue
    fi

    echo "Checking Manifest for $MANIFEST_FILE_TYPE $MANIFEST_FILE integrity..."

    SIZE_SRC="`wc -c $MANIFEST_FILE | awk '{ print $1 }'`"
    SIZE_MANIFEST="`echo $MANIFEST_LINE | awk '{ print $3 }'`"

    # Check source code size
    if [ "$SIZE_SRC" != "$SIZE_MANIFEST" ]; then
      echo "SIZE Manifest: $SIZE_MANIFEST; SIZE $SRC: $SIZE_SRC"
      exit $ERROR_MANIFEST
    else
      echo "Size match."
    fi

    # Check source code integrity
    for ALGO in md5 rmd160 sha1 sha256 sha512; do
      if [ $ALGO = "rmd160" ]; then
        ALGO_SRC="`openssl rmd160 $MANIFEST_FILE | awk '{ print $2 }'`"
      else
        ALGO_SRC="`"$ALGO"sum $MANIFEST_FILE | awk '{ print $1 }'`"
      fi
      ALGO="`echo $ALGO | tr '[:lower:]' '[:upper:]'`"
      ALGO_MANIFEST=$(echo $MANIFEST_LINE | sed "s/.* $ALGO //" | awk '{ print $1 }')
      if [ "$ALGO_SRC" != "$ALGO_MANIFEST" ]; then
        echo "$ALGO Manifest: $ALGO_MANIFEST; $ALGO $SRC: $ALGO_SRC"
        exit $ERROR_MANIFEST
      else
        echo "$ALGO match."
      fi
    done

  done

else
  exit $ERROR_MANIFEST
fi

# Untar
cd "$PKG_WORK"
tar --no-same-owner --no-same-permissions -xvf "$SRC_DIR/$SRC" || exit $ERROR_TAR
PKG_SRC="$PWD/`ls -l | awk '/^d/ { print $NF }'`"
cd "$PKG_SRC"

# Patch source
patches=" [[PATCH URLS]]
         $PKG_NAME.diff $PKG_NAME-$PKG_VERSION.diff
         $PKG_NAME-$PKG_VERSION-$ARCH.diff $PKG_NAME-$ARCH.diff"
for patch in $patches; do
  patch="`basename $patch`"
  if [ -f "$CWD/$patch" ]; then
    patch -Np1 < "$CWD/$patch" || exit $ERROR_PATCH
  elif [ -f "$CWD/patches/$patch" ]; then
    patch -Np1 < "$CWD/patches/$patch" || exit $ERROR_PATCH
  elif [ -f "$CWD/$patch.gz" ]; then
    gzip -dc "$CWD/$patch.gz" | patch -Np1 || exit $ERROR_PATCH
  elif [ -f "$CWD/patches/$patch.gz" ]; then
    gzip -dc "$CWD/patches/$patch.gz" | patch -Np1 || exit $ERROR_PATCH
  elif [ -f "$SRC_DIR/$patch" ]; then
    if [ "`basename $patch .gz`" != "$patch" ]; then
      gzip -dc $SRC_DIR/$patch | patch -Np1 || exit $ERROR_PATCH
    elif [ "`basename $patch .bz2`" != "$patch" ]; then
      bzip2 -dc $SRC_DIR/$patch | patch -Np1 || exit $ERROR_PATCH
    else
      patch -Np1 < "$SRC_DIR/$patch" || exit $ERROR_PATCH
    fi
  fi
done

# Configure
CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  ./configure \
  --prefix="$PREFIX" --libdir="$LIBDIR" $CONF_OPTIONS || exit $ERROR_CONF

# Compile
make all || exit $ERROR_MAKE

# Change intall path
eval "sed -i 's¦^PREFIX=$PREFIX¦PREFIX=$PKG/${PREFIX:1}¦' Makefile"
# Install
make install || exit $ERROR_INSTALL

cd $PKG
for i in `grep -Rl '/tmp/package-scilab' usr/*`; do 
    sed -i 's:/tmp/package-scilab::g' $i
done

cd - >/dev/null

# Make Scilab.desktop
mkdir -p $PKG/usr/share/applications/ 2>/dev/null
cat << EOF_KDE > $PKG/usr/share/applications/Scilab.desktop
[Desktop Entry]
Encoding=UTF-8
Categories=Education;Math;
Exec=scilab
Icon=$PREFIX/lib/$PKG_NAME-$VERSION/X11_defaults/scilab.xpm
StartupNotify=true
Terminal=false
Type=Application
Name=Scilab
GenericName=Scilab
Comment=
EOF_KDE

# Strip binaries
( cd "$PKG"
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | \
    xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | \
    xargs strip --strip-unneeded 2> /dev/null
)

# Install documentation
DOCS="ACKNOWLEDGEMENTS CHANGES README_Unix README_Windows.txt RELEASE_NOTES Readme_Visual.txt licence.txt license.txt release_notes.txt"
mkdir -p "$PKG/usr/doc/$PKG_NAME-$PKG_VERSION" || exit $ERROR_MKDIR
for doc in $DOCS; do
  if [ -f "$doc" ]; then
    cp -a $doc "$PKG/usr/doc/$PKG_NAME-$PKG_VERSION"
  fi
done

# Add package description (slack-desc)
mkdir -p "$PKG/install" || exit $ERROR_MKDIR
cat << EODESC > "$PKG/install/slack-desc"
# HOW TO EDIT THIS FILE:
# The "handy ruler" below makes it easier to edit a package description. Line
# up the first '|' above the ':' following the base package name, and the '|'
# on the right side marks the last column you can put a character in. You must
# make exactly 11 lines for the formatting to be correct.  It's also
# customary to leave one space after the ':'.

      |-----handy-ruler-------------------------------------------------------|
scilab: scilab by Slack.Sarava
scilab:
scilab: Scilab is a scientific software package for numerical computations
scilab: providing a powerful open computing enviroanment for engineering and
scilab: scientific applications. Developed since 1990 by researchers from
scilab: INRIA and ENPC, it is now maintained and developed by Scilab
scilab: Consortium since its creation in May 2003.
scilab: Distributed freely and open source (see the license and the
scilab: trademark license) via the Internet since 1994, Scilab is currently
scilab: being used in educational and industrial environments around the
scilab: world.
EODESC

# Copy slack-required
mkdir -p "$PKG/install" || exit $ERROR_MKDIR
if [ -f "$CWD/slack-required" ]; then
  cp $CWD/slack-required $PKG/install
fi

# Build the package
cd "$PKG"
makepkg -l y -c n "$REPOS/$PKG_NAME-$PKG_VERSION-$ARCH-$BUILD.tgz" || exit $ERROR_MKPKG

# Delete source and build directories if requested
if [ "$CLEANUP" == "yes" ] || [ "$1" = "--cleanup" ]; then
  rm -rf "$PKG_WORK" "$PKG"
fi
