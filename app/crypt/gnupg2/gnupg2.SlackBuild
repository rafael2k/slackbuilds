#!/bin/bash
#
#  gnupg2.SlackBuild is free software; you can redistribute
#  it and/or modify it under the terms of the GNU General Public
#  License as published by the Free Software Foundation; either
#  version 2 of the License, or any later version.
#
#  gnupg2.SlackBuild is distributed in the hope that it
#  will be useful, but WITHOUT ANY WARRANTY; without even the
#  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#  PURPOSE.  See the GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public
#  License along with this program; if not, write to the Free
#  Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
#  MA 02111-1307, USA
#
# SlackBuild for gnupg2 (GNU Privacy Guard v2)
# http://www.gnupg.org/
#
# Author: Luis ( luis at riseup d0t net )
#

# Look for slackbuildrc
if [ -f ~/.slackbuildrc ]; then
  source ~/.slackbuildrc
elif [ -f /etc/slackbuildrc ]; then
  source /etc/slackbuildrc
fi

# Set variables
CWD="$(pwd)"
SRC_NAME="gnupg"
PKG_NAME="gnupg2"
ARCH=${ARCH:=i486}
SRC_VERSION=${VERSION:=2.0.7}
PKG_VERSION="$(echo "$SRC_VERSION" | tr '[[:blank:]-]' '_')"
BUILD=${BUILD:=1ls}
SRC_DIR=${SRC_DIR:=$CWD}/$PKG_NAME
TMP=${TMP:=/tmp}
PKG=${PKG:=$TMP/package-$PKG_NAME}
REPOS=${REPOS:=$TMP}
PREFIX=${PREFIX:=/usr}
PKG_WORK="$TMP/$SRC_NAME"
CONF_OPTIONS=${CONF_OPTIONS:=--infodir=$PREFIX/info --mandir=$PREFIX/man --program-prefix="" --program-suffix="" --enable-static-rnd=linux --enable-noexecstack}
NUMJOBS=${NUMJOBS:=-j3}

# Set system libraries' path and optmization flags based on $ARCH
LIBDIR="$PREFIX/lib"

if [ "$ARCH" = "i386" ]; then
  SLKCFLAGS="-O2 -march=i386 -mcpu=i686"
elif [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mcpu=i686"
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686"
elif [ "$ARCH" = "s390" ]; then
  SLKCFLAGS="-O2"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2"
  LIBDIR="$PREFIX/lib64"
fi

# Set error codes (used by createpkg)
ERROR_WGET=31;      ERROR_MAKE=32;      ERROR_INSTALL=33
ERROR_MD5=34;       ERROR_CONF=35;      ERROR_HELP=36
ERROR_TAR=37;       ERROR_MKPKG=38;     ERROR_GPG=39
ERROR_PATCH=40;     ERROR_VCS=41;       ERROR_MKDIR=42

# Clean up any leftovers of previous builds
rm -rf "$PKG_WORK" 2> /dev/null
rm -rf "$PKG" 2> /dev/null

# Create directories if necessary
mkdir -p "$SRC_DIR" || exit $ERROR_MKDIR
mkdir -p "$PKG" || exit $ERROR_MKDIR
mkdir -p "$REPOS" || exit $ERROR_MKDIR
mkdir -p "$PKG_WORK" || exit $ERROR_MKDIR

# Dowload source if necessary
SRC="$SRC_NAME-$SRC_VERSION.tar.bz2"
URL="ftp://ftp.gnupg.org/gcrypt/gnupg/$SRC"

if [ ! -s "$SRC_DIR/$SRC" ] || ! bzip2 -t "$SRC_DIR/$SRC" 2> /dev/null; then
  wget "$URL" -O "$SRC_DIR/$SRC" || exit $ERROR_WGET
fi

# Import minimized signing key from
# http://www.gnupg.org/(en)/signature_key.html
gpg --import << EOKEY || exit $ERROR_GPG
-----BEGIN PGP PUBLIC KEY BLOCK-----

mI4EQ7f6xwEEANCZGXorXMkDKpNsRnf+ZhqHOPmDcEKPDkplcCL2PFACN7QaK4Re
oWvZ4mqmVOL3ZXU51zFNI9aD3JAIToET2jr2hGYWFExdBf9eaYgBeXZGUOnbJl1V
JDzWDGU6ZHNpwPiAAgYjpsoBgZCxbl7x0VtYukjc9vIkR/1GXGC4v9ohACCBVlCZ
tCZXZXJuZXIgS29jaCAoZGlzdCBzaWcpIDxkZDlqbkBnbnUub3JnPoi8BBMBAgAm
BQJDt/rIAhsDBQkFo5qABgsJCAcDAgQVAggDBBYCAwECHgECF4AACgkQU7Yg0Bzg
xjB5owQAh0MO0kuQ7hM6AKj8YK4bRGapHBmeIniaer9Y6vwXgErfDUci7BUQTxXo
FFTgKHHzBz39bzeStyQgTm5plGaOEJcJayIr07DaeBtcC/dMoVUJswybKMFtP7fU
z05PRKjChvxrWzhe/Yn6BAmPF+6YxQo2W98rzq0THS5wKJjXmHw=
=3fgc
-----END PGP PUBLIC KEY BLOCK-----
EOKEY

# Dowload source's signature if necessary and check it
if [ ! -s "$SRC_DIR/$SRC.sig" ]; then
  wget "$URL.sig" -O "$SRC_DIR/$SRC.sig" || exit $ERROR_WGET
fi

gpg --verify "$SRC_DIR/$SRC.sig" "$SRC_DIR/$SRC" || exit $ERROR_GPG

# Untar
cd "$PKG_WORK"
tar --no-same-owner --no-same-permissions -xvf "$SRC_DIR/$SRC" || exit $ERROR_TAR
PKG_SRC=`ls -l | awk '/^d/ { print $8 }'`
cd "$PKG_SRC"

# Fix source files' ownership and permission
chown -R root:root .
find . -perm 666 -exec chmod 644 {} \;
find . -perm 664 -exec chmod 644 {} \;
find . -perm 600 -exec chmod 644 {} \;
find . -perm 444 -exec chmod 644 {} \;
find . -perm 400 -exec chmod 644 {} \;
find . -perm 440 -exec chmod 644 {} \;
find . -perm 777 -exec chmod 755 {} \;
find . -perm 775 -exec chmod 755 {} \;
find . -perm 511 -exec chmod 755 {} \;
find . -perm 711 -exec chmod 755 {} \;
find . -perm 555 -exec chmod 755 {} \;

# Configure
CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  ./configure \
  --prefix="$PREFIX" --libdir="$LIBDIR" $CONF_OPTIONS || exit $ERROR_CONF

# Compile
make $NUMJOBS || exit $ERROR_MAKE

# Install
make install DESTDIR="$PKG" || exit $ERROR_INSTALL

# Strip binaries
( cd "$PKG"
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | \
    xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | \
    xargs strip --strip-unneeded 2> /dev/null
)

# Avoid overwriting share/gnupg/ files, from Slackware's gnupg package
mv -f "$PKG/$PREFIX/share/gnupg" "$PKG/$PREFIX/share/$PKG_NAME"

# Install gpg2, gpgv2, gpg-agent, and gpgsm already suid root
chmod 4755 "$PKG/$PREFIX/bin/"{gpg2,gpgv2,gpg-agent,gpgsm}

# Compress and link manpages
if [ -d "$PKG/$PREFIX/man" ]; then
  ( cd "$PKG/$PREFIX/man"
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd $manpagedir
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink $eachpage ).gz $eachpage.gz
          rm $eachpage
        done
        gzip -9 *.?
      )
    done
  )
fi

# Compress info files
if [ -d "$PKG/$PREFIX/info" ]; then
  ( cd "$PKG/$PREFIX/info"
    rm -f dir
    gzip -9 *
  )
fi

# Install documentation
DOCS="ABOUT-NLS AUTHORS COPYING ChangeLog INSTALL NEWS README* THANKS TODO \
      VERSION doc/DETAILS doc/HACKING doc/KEYSERVER doc/OpenPGP doc/TRANSLATE \
      doc/examples doc/*.png"
mkdir -p "$PKG/usr/doc/$PKG_NAME-$PKG_VERSION" || exit $ERROR_MKDIR
cp -a $DOCS "$PKG/usr/doc/$PKG_NAME-$PKG_VERSION" 2> /dev/null

# Build HTML documentation
( cd doc
  make gnupg.html || exit $ERROR_MAKE
  mv gnupg.html $PKG/usr/doc/$PKG_NAME-$VERSION/html
)

# Fix some filenames in the html directory
( cd $PKG/usr/doc/$PKG_NAME-$VERSION/html
  mv how_002dto_002dspecify_002da_002duser_002did.html howto_specify_user_id.html
  mv gpg-1_002e4-vs_002e-1_002e9.html gpg-1.4-vs-1.9.html
  mv gpg_002dpreset_002dpassphrase.html gpg_preset_passphrase.html
  mv gpgsm_002dgencert_002esh.html gpgsm_gencert_sh.html
  mv Invoking-gpg_002dpreset_002dpassphrase.html Invoking-gpg_preset_passphrase.html
  mv Invoking-gpg_002dconnect_002dagent.html Invoking-gpg_connect_agent.html
  mv gpg_002dconnect_002dagent.html gpg_connect_agent.html
  mv Agent-GET_005fCONFIRMATION.html Agent-GET_CONFIRMATION.html
  mv option-_002d_002denable_002dssh_002dsupport.html option-enable_ssh_support.html
  mv option-_002d_002doptions.html option-options.html
  mv Invoking-GPG_002dAGENT.html Invoking-GPG_AGENT.html
  mv option-_002d_002dallow_002dmark_002dtrusted.html option-allow_mark_trusted.html
  mv Controlling-gpg_002dconnect_002dagent.html Controlling-gpg_connect_agent.html
  mv Agent-GET_005fPASSPHRASE.html Agent-GET_PASSPHRASE.html
  mv option-_002d_002dhomedir.html option-homedir.html
  mv PKCS_002315-Card.html PKCS-15-Card.html
)

# Move some docs from /usr/share to their proper location
mv $PKG/$PREFIX/share/$PKG_NAME/FAQ $PKG/usr/doc/$PKG_NAME-$VERSION
mv $PKG/$PREFIX/share/$PKG_NAME/faq.html $PKG/usr/doc/$PKG_NAME-$VERSION/html

# Add package description (slack-desc)
mkdir -p "$PKG/install" || exit $ERROR_MKDIR
cat << EODESC > "$PKG/install/slack-desc"
# HOW TO EDIT THIS FILE:
# The "handy ruler" below makes it easier to edit a package description.  Line
# up the first '|' above the ':' following the base package name, and the '|'
# on the right side marks the last column you can put a character in.  You must
# make exactly 11 lines for the formatting to be correct.  It's also
# customary to leave one space after the ':'.

      |-----handy-ruler--------------------------------------------------------|
gnupg2: GnuPG2 (The GNU Privacy Guard version 2.x)
gnupg2:
gnupg2: GnuPG is GNU's tool for secure communication and data storage.  It can
gnupg2: be used to encrypt data and to create digital signatures.  It includes
gnupg2: an advanced key management facility and is compliant with the proposed
gnupg2: OpenPGP Internet standard as described in RFC2440 and the S/MIME
gnupg2: standard as described by several RFCs.
gnupg2:
gnupg2: GnuPG 2.0 is the stable version of GnuPG integrating support for
gnupg2: OpenPGP and S/MIME.  It does not conflict with an installed 1.4.x
gnupg2: OpenPGP-only version.
EODESC

# Build the package
cd "$PKG"
makepkg -l y -c n "$REPOS/$PKG_NAME-$PKG_VERSION-$ARCH-$BUILD.tgz" || exit $ERROR_MKPKG

# Delete source and build directories if requested
if [ "$CLEANUP" == "yes" ]; then
  rm -rf "$PKG_WORK" "$PKG"
fi
