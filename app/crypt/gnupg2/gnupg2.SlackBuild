#!/bin/bash
#
# SlackBuild for gnupg2 (GNU Privacy Guard v2)
# http://www.gnupg.org/
#
# Author: Luis ( luis at riseup d0t net )
#

CWD=`pwd`

# Look for slackbuildrc
if [ -f ~/.slackbuildrc ]; then
  source ~/.slackbuildrc
elif [ -f /etc/slackbuildrc ]; then
  source /etc/slackbuildrc
fi

# Set variables
SRC_NAME="gnupg"
PKG_NAME="gnupg2"
ARCH=${ARCH:=i486}
VERSION=${VERSION:=2.0.1}
BUILD=${BUILD:=1ls}
SRC_DIR=${SRC_DIR:=$CWD}
TMP=${TMP:=/tmp}
PKG=${PKG:=$TMP/package-$PKG_NAME}
REPOS=${REPOS:=$TMP}
PREFIX=${PREFIX:=/usr}
PKG_SRC=$SRC_NAME-$VERSION

# Set system libraries' path and optmization flags based on $ARCH
LIBDIR=$PREFIX/lib

if [ "$ARCH" = "i386" ]; then
  SLKCFLAGS="-O2 -march=i386 -mcpu=i686"
elif [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mcpu=i686"
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686"
elif [ "$ARCH" = "s390" ]; then
  SLKCFLAGS="-O2"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2"
  LIBDIR="$PREFIX/lib64"
fi

# Set error codes (used by createpkg)
ERROR_WGET=31;      ERROR_MAKE=32;      ERROR_INSTALL=33
ERROR_MD5=34;       ERROR_CONF=35;      ERROR_HELP=36
ERROR_TAR=37;       ERROR_MKPKG=38;     ERROR_GPG=39
ERROR_PATCH=40;     ERROR_VCS=41;       ERROR_MKDIR=42

# Clean up any leftovers of previous builds
rm -rf $PKG_SRC 2> /dev/null
rm -rf $PKG 2> /dev/null

# Create directories, if necessary
mkdir -p $SRC_DIR || exit $ERROR_MKDIR
mkdir -p $PKG || exit $ERROR_MKDIR
mkdir -p $REPOS || exit $ERROR_MKDIR

# Import (minimized) signing key from
# http://www.gnupg.org/(en)/signature_key.html
gpg --import << EOKEY || exit $ERROR_GPG
-----BEGIN PGP PUBLIC KEY BLOCK-----

mI4EQ7f6xwEEANCZGXorXMkDKpNsRnf+ZhqHOPmDcEKPDkplcCL2PFACN7QaK4Re
oWvZ4mqmVOL3ZXU51zFNI9aD3JAIToET2jr2hGYWFExdBf9eaYgBeXZGUOnbJl1V
JDzWDGU6ZHNpwPiAAgYjpsoBgZCxbl7x0VtYukjc9vIkR/1GXGC4v9ohACCBVlCZ
tCZXZXJuZXIgS29jaCAoZGlzdCBzaWcpIDxkZDlqbkBnbnUub3JnPoi8BBMBAgAm
BQJDt/rIAhsDBQkFo5qABgsJCAcDAgQVAggDBBYCAwECHgECF4AACgkQU7Yg0Bzg
xjB5owQAh0MO0kuQ7hM6AKj8YK4bRGapHBmeIniaer9Y6vwXgErfDUci7BUQTxXo
FFTgKHHzBz39bzeStyQgTm5plGaOEJcJayIr07DaeBtcC/dMoVUJswybKMFtP7fU
z05PRKjChvxrWzhe/Yn6BAmPF+6YxQo2W98rzq0THS5wKJjXmHw=
=3fgc
-----END PGP PUBLIC KEY BLOCK-----
EOKEY

# Dowload source and its signature, if necessary
SRC="$PKG_SRC.tar.bz2"
URL="ftp://ftp.gnupg.org/gcrypt/gnupg/$SRC"

if [ ! -f "$SRC_DIR/$SRC" ]; then
  wget "$URL" -O "$SRC_DIR/$SRC" || exit $ERROR_WGET
fi
if [ ! -f "$SRC_DIR/$SRC.sig" ]; then
  wget "$URL.sig" -O "$SRC_DIR/$SRC.sig" || exit $ERROR_WGET
fi

# Check source's signature
gpg --verify $SRC_DIR/$SRC.sig $SRC_DIR/$SRC || exit $ERROR_GPG

# Untar, patch, configure, compile and install
tar --no-same-owner --no-same-permissions -xvf $SRC_DIR/$SRC || exit $ERROR_TAR
cd $PKG_SRC/g10
patch -Np0 < $CWD/filter-context-20-small.diff || exit $ERROR_PATCH
cd ..
CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  ./configure \
  --prefix=$PREFIX --libdir=$LIBDIR \
  --infodir=$PREFIX/info --mandir=$PREFIX/man \
  --enable-static-rnd=linux --enable-noexecstack || exit $ERROR_CONF
make || exit $ERROR_MAKE
make install DESTDIR=$PKG || exit $ERROR_INSTALL

# Strip binaries
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | \
    xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | \
    xargs strip --strip-unneeded 2> /dev/null
)

# Avoid overwriting share/gnupg/ files, from the original gnupg package
mv -f $PKG/$PREFIX/share/gnupg $PKG/$PREFIX/share/gnupg2

# Install gpg2, gpgv2, gpg-agent, and gpgsm already suid root
chmod 4755 $PKG/$PREFIX/bin/{gpg2,gpgv2,gpg-agent,gpgsm}

# Compress and link manpages, if any
if [ -d $PKG/$PREFIX/man ]; then
  ( cd $PKG/$PREFIX/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd $manpagedir
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink $eachpage ).gz $eachpage.gz
          rm $eachpage
        done
        gzip -9 *.?
      )
    done
  )
fi

# Compress info files, if any
if [ -d $PKG/$PREFIX/info ]; then
  ( cd $PKG/$PREFIX/info
    rm -f dir
    gzip -9 *
  )
fi

# Install documentation and examples
DOCS="ABOUT-NLS AUTHORS COPYING ChangeLog INSTALL NEWS README* THANKS TODO \
     VERSION doc/DETAILS doc/HACKING doc/KEYSERVER doc/OpenPGP doc/TRANSLATE \
     doc/examples doc/*.png"
mkdir -p $PKG/$PREFIX/doc/$PKG_NAME-$VERSION || exit $ERROR_MKDIR
cp -a $DOCS $PKG/$PREFIX/doc/$PKG_NAME-$VERSION
( cd $PKG/$PREFIX/doc/$PKG_NAME-$VERSION
  ln -sf $PREFIX/share/$PKG_NAME/FAQ .
  ln -sf $PREFIX/share/$PKG_NAME/faq.html .
)

# Add package description (slack-desc)
mkdir -p $PKG/install || exit $ERROR_MKDIR
cat << EODESC > $PKG/install/slack-desc
# HOW TO EDIT THIS FILE:
# The "handy ruler" below makes it easier to edit a package description.  Line
# up the first '|' above the ':' following the base package name, and the '|'
# on the right side marks the last column you can put a character in.  You must
# make exactly 11 lines for the formatting to be correct.  It's also
# customary to leave one space after the ':'.

      |-----handy-ruler--------------------------------------------------------|
gnupg2: gnupg2 (The GNU Privacy Guard v2)
gnupg2:
gnupg2: The GNU Privacy Guard (GnuPG) is GNU's tool for secure communication
gnupg2: and data storage.  It can be used to encrypt data, create digital
gnupg2: signatures, help authenticating using Secure Shell and to provide a
gnupg2: framework for public key cryptography.  It includes an advanced key
gnupg2: management facility and is compliant with the OpenPGP and S/MIME
gnupg2: standards.
gnupg2:
gnupg2: For more information, http://www.gnupg.org/
gnupg2:
EODESC

# Build the package
cd $PKG
makepkg -l y -c n $REPOS/$PKG_NAME-$VERSION-$ARCH-$BUILD.tgz || exit $ERROR_MKPKG

# Delete source and build directories, if requested
if [ "$CLEANUP" == "yes" ]; then
  rm -rf $CWD/$PKG_SRC $PKG
fi
